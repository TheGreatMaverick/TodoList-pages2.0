// –ü—É–Ω–∫—Ç –∑–∞–¥–∞–Ω–∏—è #1. 

// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –±–∞–∑–µ Create React App ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ–ª (Todo list):
// —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–ª–∞ ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç;
// –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON Placeholder —Å —Ä—É—á–∫–æ–π (endpoint) ¬´todos¬ª;
// —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞;
// –¥–∏–∑–∞–π–Ω –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π, –ø—Ä–∏—è—Ç–Ω—ã–π –Ω–∞ –≤–∏–¥).

// import { useEffect, useState } from "react";
// import "./App.css"; 

// export const App = () => {
//   const [todosList, setTodosList] = useState([]);
//   const [isLoading, setIsLoading] = useState(false);

//   useEffect(() => {
//     setIsLoading(true);

//     fetch("https://jsonplaceholder.typicode.com/todos")
//       .then((loadedData) => loadedData.json())
//       .then((loadedTodos) => {
//         setTodosList(loadedTodos);
//       })
//       .finally(() => setIsLoading(false));
//   }, []);

//   const toggleComplete = (id) => {
//     setTodosList((prevTodos) =>
//       prevTodos.map((todo) =>
//         todo.id === id ? { ...todo, completed: !todo.completed } : todo
//       )
//     );
//   };

//   return (
//     <div className="app">
//       <h1>–°–ø–∏—Å–æ–∫ –¥–µ–ª:</h1>

//       {isLoading ? (
//         <div className="loader-container">
//           <div className="loader"></div>
//         </div>
//       ) : (
//         <ul className="todo-list">
//           {todosList.map(({ id, title, completed }) => (
//             <li 
//               key={id} 
//               className={`todo-item ${completed ? "completed" : ""}`}
//               onClick={() => toggleComplete(id)}
//             >
//               {title}
//             </li>
//           ))}
//         </ul>
//       )}
//     </div>
//   );
// };

// –ü—É–Ω–∫—Ç –∑–∞–¥–∞–Ω–∏—è #2.
// –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∑–∞–º–µ–Ω–∏–≤ JSON Placeholder –Ω–∞ JSON Server:
// –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤);
// —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏, –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–ª–∞;
// —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –¥–µ–ª –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑–µ (–¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ –¥–µ–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç);
// —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–µ–ª –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞ ‚Äî –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (—Ç. –µ. –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏).

import { useGetTodos, useHandleAddTodo, useHandleEditTodo, useHandleDeleteTodo, useHandleFilteredAndSortedTodos, } from './hooks'
import "./App.css";

export const App = () => {
  const {isLoading, todosList, setTodosList} = useGetTodos();
  
  const {isCreating, handleAddTodo, addTodo, setAddTodo} = useHandleAddTodo(setTodosList);
  const {searchTodo, setSearchTodo, addSort, setAddSort, handleFilteredAndSortedTodos, toggleComplete} = useHandleFilteredAndSortedTodos(todosList, setTodosList);
  const {editTodo, setEditTodo, handleEditTodo, editText, setEditText} = useHandleEditTodo(setTodosList);
  const {isDeleting, handleDeleteTodo} = useHandleDeleteTodo(setTodosList)

  return (
    <div className="app">
      <h1>–°–ø–∏—Å–æ–∫ –¥–µ–ª:</h1>
      <button onClick={() => setAddSort(!addSort)}>
        {addSort ? "–û—Ç–∫–ª—é—á–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É" : "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É"}
      </button>
      <input 
        type="text" 
        placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏..." 
        value={searchTodo} 
        onChange={(e) => setSearchTodo(e.target.value)} 
      />
      {isLoading ? (
        <div className="loader-container">
          <div className="loader"></div>
        </div>
      ) : (
        <ul className="todo-list">
          {handleFilteredAndSortedTodos().map(({ id, text, completed }) => (
            <li 
              key={id} 
              className={`todo-item ${completed ? "completed" : ""}`} 
              onClick={() => toggleComplete(id)}
            >
              {editTodo === id ? (
                <>
                  <input 
                    type="text"
                    value={editText}
                    onChange={(e) => setEditText(e.target.value)}
                  />
                  <button className="save" onClick={() => handleEditTodo(id, editText)}>‚úÖ</button>
                </>
              ) : (
                <>
                  {text}
                  <div className="button-group">
                    <button className="edit"
                    onClick={() => {
                      setEditTodo(id);
                      setEditText(text);
                      }}>‚úèÔ∏è</button>
                    <button disabled={isDeleting} className="delete" onClick={() => handleDeleteTodo(id)}>üóë</button>
                  </div>
                </>
              )}
            </li>
          ))}
        </ul>
      )}
      <input 
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–ª–æ"
        value={addTodo} 
        onChange={(e) => setAddTodo(e.target.value)} 
      />
      <button disabled={isCreating} onClick={handleAddTodo}>–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ</button>
    </div>
  )
}